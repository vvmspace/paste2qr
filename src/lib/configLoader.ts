import fs from 'fs/promises'
import path from 'path'
import { compileMDX } from 'next-mdx-remote/rsc'
import { PageConfig } from '../configs/pages'
import { storage } from './storage'
import { isValidAlias } from './alias'

// Get environment variables safely
const getSiteUrl = () => {
  try {
    return process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'
  } catch {
    return 'http://localhost:3000'
  }
}

export interface MDXContent {
  config: PageConfig
  source: string
}

// Загрузка конфига из MDX файла
export async function loadMDXConfig(slug: string): Promise<MDXContent | null> {
  try {
    const filePath = path.join(process.cwd(), `src/content/${slug}.mdx`)
    const source = await fs.readFile(filePath, 'utf8')

    const { frontmatter, content } = await compileMDX<{ config: PageConfig }>({
      source,
      options: { parseFrontmatter: true },
    })

    return {
      config: frontmatter.config,
      source: source
    }
  } catch (error) {
    console.error(`Failed to load MDX config for ${slug}:`, error)
    return null
  }
}

// Загрузка конфига из JSON (для опубликованных QR кодов)
export async function loadJSONConfig(alias: string): Promise<PageConfig | null> {
  try {
    const storageItem = await storage.get(alias)
    
    if (!storageItem) {
      return null
    }

    // Создаем конфиг на основе опубликованных данных
    const config: PageConfig = {
      title: storageItem.title || `QR Code - ${alias}`,
      description: storageItem.description || `Scannable QR code generated by Paste2QR`,
      keywords: 'QR code, scannable, generated, Paste2QR',
      heroTitle: storageItem.title || 'QR Code',
      heroSubtitle: storageItem.description || 'Scannable QR code ready to use',
      heroButtonText: 'View QR Code',
      heroGradient: 'from-gray-600 to-gray-800'
    }

    return config
  } catch (error) {
    console.error(`Failed to load JSON config for ${alias}:`, error)
    return null
  }
}

// Универсальная загрузка конфига
export async function loadPageConfig(slug: string): Promise<{ config: PageConfig; mdxSource?: string; originalText?: string } | null> {
  // Для опубликованных QR кодов (валидные алиасы) сначала пробуем загрузить из JSON
  if (isValidAlias(slug)) {
    const jsonConfig = await loadJSONConfig(slug)
    if (jsonConfig) {
      // Получаем оригинальный текст из storage
      const storageItem = await storage.get(slug)
      return {
        config: jsonConfig,
        originalText: storageItem?.text || ''
      }
    }
    
    // Если JSON файла нет, но алиас валидный, генерируем конфиг из алиаса
    try {
      const { aliasToText } = await import('./alias')
      const textFromAlias = aliasToText(slug)
      
      // Создаем конфиг для алиаса
      const aliasConfig: PageConfig = {
        title: `QR Code: ${textFromAlias.substring(0, 50)}${textFromAlias.length > 50 ? '...' : ''}`,
        description: `QR code for: ${textFromAlias}`,
        keywords: 'qr code, paste to qr, text to qr',
        heroTitle: 'Paste to QR Code',
        heroSubtitle: `QR code for: ${textFromAlias}`,
        heroButtonText: 'Paste & Generate',
        heroGradient: 'from-blue-600 to-blue-800',
        canonicalUrl: `${getSiteUrl()}/qr/${slug}`,
      }
      
      return {
        config: aliasConfig,
        originalText: textFromAlias
      }
    } catch (error) {
      console.error(`Failed to generate config from alias ${slug}:`, error)
      // Fall through to try MDX
    }
  }

  // Для обычных страниц пробуем загрузить из MDX
  const mdxContent = await loadMDXConfig(slug)
  if (mdxContent) {
    return {
      config: mdxContent.config,
      mdxSource: mdxContent.source
    }
  }

  // Если не нашли в MDX, пробуем загрузить из JSON (для опубликованных QR кодов)
  const jsonConfig = await loadJSONConfig(slug)
  if (jsonConfig) {
    // Получаем оригинальный текст из storage
    const storageItem = await storage.get(slug)
    return {
      config: jsonConfig,
      originalText: storageItem?.text || ''
    }
  }

  return null
}
