import puppeteer from 'puppeteer'

async function testLocalizationFix() {
  console.log('üîç Testing localization fixes...')

  const browser = await puppeteer.launch({ headless: true })
  const page = await browser.newPage()
  await page.setViewport({ width: 1280, height: 800 })

  const locales = [
    { code: 'en', name: 'English', path: '/' },
    { code: 'es', name: 'Spanish', path: '/es' },
    { code: 'zh', name: 'Chinese', path: '/zh' },
    { code: 'fr', name: 'French', path: '/fr' },
    { code: 'am', name: 'Amharic', path: '/am' },
  ]

  const expectedHeroTexts = {
    en: {
      title: 'Paste to QR Code',
      subtitle: 'Paste any text from your clipboard and get a QR code instantly. No typing, no complexity - just paste and generate.',
      buttonText: 'Paste & Generate',
    },
    es: {
      title: 'Pegar a C√≥digo QR',
      subtitle: 'Pega cualquier texto de tu portapapeles y obt√©n un c√≥digo QR al instante. Sin escribir, sin complejidad - solo pega y genera.',
      buttonText: 'Pegar y Generar',
    },
    zh: {
      title: 'Á≤òË¥¥ÁîüÊàê‰∫åÁª¥Á†Å',
      subtitle: '‰ªéÂâ™Ë¥¥ÊùøÁ≤òË¥¥‰ªª‰ΩïÊñáÊú¨ÔºåÁ´ãÂç≥ÁîüÊàê‰∫åÁª¥Á†Å„ÄÇÊó†ÈúÄËæìÂÖ•ÔºåÊó†ÈúÄÂ§çÊùÇÊìç‰Ωú - Âè™ÈúÄÁ≤òË¥¥Âπ∂ÁîüÊàê„ÄÇ',
      buttonText: 'Á≤òË¥¥Âπ∂ÁîüÊàê',
    },
    fr: {
      title: 'Coller vers Code QR',
      subtitle: 'Collez n\'importe quel texte de votre presse-papier et obtenez un code QR instantan√©ment. Pas de frappe, pas de complexit√© - collez et g√©n√©rez.',
      buttonText: 'Coller et G√©n√©rer',
    },
    am: {
      title: '·àò·àà·å†·çç ·ãà·ã∞ QR ·äÆ·ãµ',
      subtitle: '·ä®·âÖ·äï·å•·â• ·à∞·àå·ã≥·ãé ·àõ·äï·äõ·ãç·äï·àù ·åΩ·àë·çç ·ã≠·àà·å•·çâ ·ä•·äì ·ãà·ã≤·ã´·ãç·äë QR ·äÆ·ãµ ·ã´·åç·äô·ç¢ ·àò·â∞·ã®·â• ·ã®·àà·àù·ç£ ·ãç·àµ·â•·àµ·â•·äê·âµ ·ã®·àà·àù - ·ãù·àù ·â•·àà·ãç ·ã≠·àà·å•·çâ ·ä•·äì ·ã≠·çç·å†·à©·ç¢',
      buttonText: '·àò·àà·å†·çç ·ä•·äì ·àò·çç·å†·à≠',
    },
  }

  for (const locale of locales) {
    console.log(`\nüåç Checking ${locale.name} (${locale.code})...`)

    const url = `http://localhost:3000${locale.path}`
    await page.goto(url, { waitUntil: 'networkidle0' })

    // Wait for i18n to load
    await new Promise(resolve => setTimeout(resolve, 1000))

    const content = await page.evaluate((localeCode, currentUrl) => {
      // Get page title
      const title = document.querySelector('title')?.textContent || ''

      // Get H1 from header
      const h1 = document.querySelector('div.bg-white h1')?.textContent || ''

      // Get Hero content
      const heroTitle = document.querySelector('main h2')?.textContent || ''
      const heroSubtitle = document.querySelector('main p')?.textContent || ''
      const heroButton = document.querySelector('button.inline-flex')?.textContent || ''

      // Get MDX content (should be below the fold)
      const mdxContent = document.querySelector('.prose')?.textContent || ''

      return {
        title,
        h1,
        heroTitle,
        heroSubtitle,
        heroButton,
        mdxContent: mdxContent.substring(0, 200) + '...',
        url: currentUrl
      }
    }, locale.code, url)

    console.log(`  üìÑ Title: ${content.title}`)
    console.log(`  üè∑Ô∏è  H1: ${content.h1}`)
    console.log(`  üéØ Hero Title: ${content.heroTitle}`)
    console.log(`  üìù Hero Subtitle: ${content.heroSubtitle}`)
    console.log(`  üîò Hero Button: ${content.heroButton}`)
    console.log(`  üìö MDX Content: ${content.mdxContent}`)

    // Check if Hero content is localized
    const expected = expectedHeroTexts[locale.code]
    if (expected) {
      const titleMatch = content.heroTitle.includes(expected.title) || content.heroTitle === expected.title
      const subtitleMatch = content.heroSubtitle.includes(expected.subtitle) || content.heroSubtitle === expected.subtitle
      const buttonMatch = content.heroButton.includes(expected.buttonText) || content.heroButton === expected.buttonText

      console.log(`  ‚úÖ Hero Title Match: ${titleMatch}`)
      console.log(`  ‚úÖ Hero Subtitle Match: ${subtitleMatch}`)
      console.log(`  ‚úÖ Hero Button Match: ${buttonMatch}`)

      if (titleMatch && subtitleMatch && buttonMatch) {
        console.log(`  üéâ ${locale.name} Hero content is properly localized!`)
      } else {
        console.log(`  ‚ùå ${locale.name} Hero content is NOT properly localized!`)
      }
    }

    // Check if MDX content exists
    if (content.mdxContent && content.mdxContent.length > 50) {
      console.log(`  ‚úÖ MDX content is present`)
    } else {
      console.log(`  ‚ùå MDX content is missing or too short`)
    }
  }

  await browser.close()
  console.log('\n‚úÖ Testing completed!')
}

testLocalizationFix().catch(console.error)
